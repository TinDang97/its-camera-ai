# Redis Streams Configuration for High-Performance Queue Processing
# Replaces Kafka with Redis Streams for camera frame processing
# Optimized for gRPC serialization and sub-100ms latency

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-streams
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: queue-engine
    app.kubernetes.io/version: "7.2.0"
    app.kubernetes.io/part-of: its-camera-ai
spec:
  serviceName: redis-streams-headless
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-streams
      app.kubernetes.io/component: queue-engine
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-streams
        app.kubernetes.io/component: queue-engine
        app.kubernetes.io/version: "7.2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
        config.alpha.kubernetes.io/checksum: "redis-streams-config"
    spec:
      serviceAccountName: redis-streams
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis-streams
        image: redis:7.2.0-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        - --port
        - "6379"
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        env:
        - name: REDIS_REPLICATION_MODE
          value: "master"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        - name: REDIS_PORT_NUMBER
          value: "6379"
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
          limits:
            cpu: "4"
            memory: "16Gi"
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /var/log/redis
          
      # Redis Exporter for Prometheus metrics
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.56.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "camera_frames*,processed_frames*,inference_queue*"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-streams-config
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - redis-streams
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: workload-type
                operator: In
                values:
                - general
                - database
                - streaming
      
      tolerations:
      - key: workload-type
        operator: Equal
        value: streaming
        effect: NoSchedule
      
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: redis-streams

  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/name: redis-streams
        app.kubernetes.io/component: storage
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 200Gi

---
# Redis Streams Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-streams-config
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: config
data:
  redis.conf: |
    # Redis Streams Configuration for Queue Processing
    # Optimized for high-throughput camera frame processing
    
    # Basic Configuration
    bind 0.0.0.0
    port 6379
    protected-mode yes
    requirepass ${REDIS_PASSWORD}
    
    # Data Persistence (optimized for queue workloads)
    save 60 1000
    save 300 100
    save 900 10
    rdbcompression yes
    rdbchecksum yes
    
    # AOF for better durability
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Memory Management
    maxmemory 12gb
    maxmemory-policy volatile-lru
    
    # Streaming Configuration
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    
    # Network and Connection Settings
    tcp-backlog 1024
    tcp-keepalive 300
    timeout 300
    
    # Client Management
    maxclients 10000
    
    # Threading for better performance
    io-threads 4
    io-threads-do-reads yes
    
    # Lazy deletion for performance
    lazyfree-lazy-eviction yes
    lazyfree-lazy-expire yes
    lazyfree-lazy-server-del yes
    replica-lazy-flush yes
    
    # Logging
    loglevel notice
    logfile /var/log/redis/redis-server.log
    
    # Advanced optimizations for queue workloads
    hash-max-ziplist-entries 1024
    hash-max-ziplist-value 16384
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # HyperLogLog optimizations
    hll-sparse-max-bytes 3000
    
    # Key expiration and notification
    notify-keyspace-events Ex
    
    # Performance tuning
    tcp-nodelay yes
    stop-writes-on-bgsave-error no

---
# Service for Redis Streams
apiVersion: v1
kind: Service
metadata:
  name: redis-streams
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: queue-engine
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300
  selector:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: queue-engine
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: 9121
    protocol: TCP

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: redis-streams-headless
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: queue-engine
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: queue-engine
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP

---
# Service Account for Redis Streams
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-streams
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: rbac

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-streams-pdb
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-streams
      app.kubernetes.io/component: queue-engine

---
# Redis Authentication Secret
apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: auth
type: Opaque
data:
  password: "SXRzQ2FtZXJhQUlSZWRpc1Bhc3N3b3JkMjAyNA==" # ItsCarneraAIRedisPassword2024

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-streams-monitor
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis-streams
    app.kubernetes.io/component: monitoring
    team: its-camera-ai
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-streams
      app.kubernetes.io/component: queue-engine
  endpoints:
  - port: metrics
    interval: 15s
    scrapeTimeout: 10s
    path: /metrics