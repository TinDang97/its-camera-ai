apiVersion: v1
kind: Namespace
metadata:
  name: its-monitoring
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: its-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources:
      - deployments
      - statefulsets
      - daemonsets
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources:
      - jobs
      - cronjobs
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: its-monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: its-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'its-camera-ai'
        environment: 'production'
    
    rule_files:
      - /etc/prometheus/rules/*.yml
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093
    
    scrape_configs:
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
      
      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      # ITS Camera AI Services
      - job_name: 'its-camera-ai'
        static_configs:
          - targets:
              - 'app.default.svc.cluster.local:8000'
            labels:
              service: 'main-app'
      
      # PostgreSQL
      - job_name: 'postgresql'
        static_configs:
          - targets:
              - 'postgresql-primary.its-database.svc.cluster.local:9187'
            labels:
              service: 'postgresql-primary'
          - targets:
              - 'postgresql-replica.its-database.svc.cluster.local:9187'
            labels:
              service: 'postgresql-replica'
      
      # TimescaleDB
      - job_name: 'timescaledb'
        static_configs:
          - targets:
              - 'timescaledb.its-database.svc.cluster.local:9187'
            labels:
              service: 'timescaledb'
      
      # Redis
      - job_name: 'redis'
        static_configs:
          - targets:
              - 'redis-exporter.its-database.svc.cluster.local:9121'
            labels:
              service: 'redis'
      
      # Kafka
      - job_name: 'kafka'
        static_configs:
          - targets:
              - 'kafka-exporter.its-messaging.svc.cluster.local:9308'
            labels:
              service: 'kafka'
      
      # MinIO
      - job_name: 'minio'
        metrics_path: /minio/v2/metrics/cluster
        static_configs:
          - targets:
              - 'minio.its-storage.svc.cluster.local:9000'
            labels:
              service: 'minio'
      
      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:9100'
            target_label: __address__
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: its-monitoring
data:
  alerts.yml: |
    groups:
      - name: infrastructure
        interval: 30s
        rules:
          - alert: PostgreSQLDown
            expr: up{job="postgresql"} == 0
            for: 1m
            labels:
              severity: critical
              service: postgresql
            annotations:
              summary: "PostgreSQL is down"
              description: "PostgreSQL instance {{ $labels.instance }} is down for more than 1 minute."
          
          - alert: RedisDown
            expr: up{job="redis"} == 0
            for: 1m
            labels:
              severity: critical
              service: redis
            annotations:
              summary: "Redis is down"
              description: "Redis instance {{ $labels.instance }} is down for more than 1 minute."
          
          - alert: KafkaDown
            expr: up{job="kafka"} == 0
            for: 1m
            labels:
              severity: critical
              service: kafka
            annotations:
              summary: "Kafka is down"
              description: "Kafka broker {{ $labels.instance }} is down for more than 1 minute."
          
          - alert: HighMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 90% on {{ $labels.instance }}"
          
          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% on {{ $labels.instance }}"
          
          - alert: DiskSpaceLow
            expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"}) < 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Low disk space"
              description: "Less than 10% disk space remaining on {{ $labels.instance }}"
      
      - name: application
        interval: 30s
        rules:
          - alert: HighInferenceLatency
            expr: histogram_quantile(0.95, rate(inference_duration_seconds_bucket[5m])) > 0.1
            for: 5m
            labels:
              severity: warning
              service: vision-engine
            annotations:
              summary: "High inference latency detected"
              description: "95th percentile inference latency is above 100ms"
          
          - alert: LowGPUUtilization
            expr: nvidia_gpu_utilization < 50
            for: 10m
            labels:
              severity: info
              service: gpu
            annotations:
              summary: "Low GPU utilization"
              description: "GPU utilization is below 50% for {{ $labels.gpu }}"
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: its-monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: web
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: its-monitoring
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsNonRoot: true
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          imagePullPolicy: IfNotPresent
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=30d'
            - '--storage.tsdb.retention.size=50GB'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
          ports:
            - containerPort: 9090
              name: web
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-data
              mountPath: /prometheus
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: rules
          configMap:
            name: prometheus-rules
  volumeClaimTemplates:
    - metadata:
        name: prometheus-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 100Gi