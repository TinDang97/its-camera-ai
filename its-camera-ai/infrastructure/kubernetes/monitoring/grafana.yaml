apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: its-monitoring
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: false
      
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        editable: false
      
      - name: TimescaleDB
        type: postgres
        access: proxy
        url: timescaledb.its-database.svc.cluster.local:5433
        database: its_metrics
        user: its_metrics_user
        secureJsonData:
          password: its_metrics_password
        jsonData:
          sslmode: disable
          postgresVersion: 1500
          timescaledb: true
        editable: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: its-monitoring
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/dashboards
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: its-monitoring
type: Opaque
stringData:
  admin-user: admin
  admin-password: grafana_admin_password_change_in_production
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: its-monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: its-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
            - name: GF_SERVER_ROOT_URL
              value: "http://grafana.its-monitoring.svc.cluster.local:3000"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            - name: GF_AUTH_BASIC_ENABLED
              value: "true"
            - name: GF_METRICS_ENABLED
              value: "true"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards
              mountPath: /etc/grafana/dashboards
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: its-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: its-monitoring
data:
  system-overview.json: |
    {
      "dashboard": {
        "title": "ITS Camera AI - System Overview",
        "panels": [
          {
            "title": "Camera Status",
            "type": "stat",
            "targets": [
              {
                "expr": "count(up{job=\"its-camera-ai\"})"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "title": "Inference Latency (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(inference_duration_seconds_bucket[5m]))"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0}
          },
          {
            "title": "GPU Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "nvidia_gpu_utilization"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "title": "System Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Kafka Messages/sec",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(kafka_server_broker_topic_metrics_messages_in_total[1m])"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }