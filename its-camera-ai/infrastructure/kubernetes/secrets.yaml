# Secrets for ITS Camera AI System
# Sensitive configuration data

apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: its-camera-ai
    app.kubernetes.io/component: api
type: Opaque
data:
  # JWT secrets (base64 encoded placeholders - replace with actual values)
  JWT_SECRET_KEY: "<base64-encoded-jwt-secret>"
  JWT_REFRESH_SECRET_KEY: "<base64-encoded-refresh-secret>"

  # Database credentials
  DB_USERNAME: "aXRzX3VzZXI="  # its_user
  DB_PASSWORD: "<base64-encoded-db-password>"

  # Redis password
  REDIS_PASSWORD: "<base64-encoded-redis-password>"

  # External API keys
  MONITORING_API_KEY: "<base64-encoded-monitoring-key>"
  ENCRYPTION_KEY: "<base64-encoded-encryption-key>"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secrets
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
type: Opaque
data:
  # PostgreSQL superuser credentials
  postgres-password: "<base64-encoded-postgres-password>"

  # Application database credentials
  username: "aXRzX3VzZXI="  # its_user
  password: "<base64-encoded-db-password>"

  # Replication user credentials
  replication-username: "cmVwbGljYXRvcg=="  # replicator
  replication-password: "<base64-encoded-replication-password>"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
type: Opaque
data:
  # Redis authentication
  redis-password: "<base64-encoded-redis-password>"

  # Sentinel authentication
  sentinel-password: "<base64-encoded-sentinel-password>"

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: its-camera-ai
    app.kubernetes.io/component: ingress
type: kubernetes.io/tls
data:
  # TLS certificate and key (replace with actual certificate)
  tls.crt: "<base64-encoded-tls-certificate>"
  tls.key: "<base64-encoded-tls-private-key>"

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: its-camera-ai
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials for private images
  .dockerconfigjson: "<base64-encoded-docker-config>"

---
# External secrets operator configuration (optional)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: its-camera-ai
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: its-camera-ai
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: postgresql-secrets
    creationPolicy: Owner
  data:
  - secretKey: postgres-password
    remoteRef:
      key: its-camera-ai/postgres
      property: password
  - secretKey: username
    remoteRef:
      key: its-camera-ai/postgres
      property: username
  - secretKey: password
    remoteRef:
      key: its-camera-ai/postgres
      property: app_password

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-credentials
  namespace: its-camera-ai
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: api-secrets
    creationPolicy: Owner
  data:
  - secretKey: JWT_SECRET_KEY
    remoteRef:
      key: its-camera-ai/jwt
      property: secret_key
  - secretKey: JWT_REFRESH_SECRET_KEY
    remoteRef:
      key: its-camera-ai/jwt
      property: refresh_secret_key
  - secretKey: ENCRYPTION_KEY
    remoteRef:
      key: its-camera-ai/encryption
      property: key
