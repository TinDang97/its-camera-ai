# Vault Agent Injector for ITS Camera AI
# Automatically injects secrets into application pods using Vault Agent sidecar

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-agent-injector
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-agent-injector
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["get", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-agent-injector-binding
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-agent-injector
subjects:
- kind: ServiceAccount
  name: vault-agent-injector
  namespace: its-camera-ai

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-injector-config
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
data:
  injector-config.yaml: |
    vault:
      address: "https://vault.its-camera-ai.svc.cluster.local:8200"
      tls_skip_verify: false
      ca_cert: /vault/tls/ca.crt
      
    auth:
      method: "kubernetes"
      mount_path: "auth/kubernetes"
      
    templates:
      # Database configuration template
      - destination: /vault/secrets/database.env
        contents: |
          {{- with secret "its-camera-ai/data/database/postgres" -}}
          DB_HOST={{ .Data.data.host }}
          DB_PORT={{ .Data.data.port }}
          DB_NAME={{ .Data.data.database }}
          DB_USERNAME={{ .Data.data.username }}
          DB_PASSWORD={{ .Data.data.password }}
          DB_SSL_MODE={{ .Data.data.ssl_mode }}
          {{- end }}
          
          {{- with secret "its-camera-ai/data/database/redis" -}}
          REDIS_HOST={{ .Data.data.host }}
          REDIS_PORT={{ .Data.data.port }}
          REDIS_PASSWORD={{ .Data.data.password }}
          {{- end }}
      
      # API configuration template
      - destination: /vault/secrets/api.env
        contents: |
          {{- with secret "its-camera-ai/data/api/jwt" -}}
          JWT_SECRET_KEY={{ .Data.data.secret_key }}
          JWT_REFRESH_SECRET_KEY={{ .Data.data.refresh_secret_key }}
          {{- end }}
          
          {{- with secret "its-camera-ai/data/encryption/master" -}}
          ENCRYPTION_KEY={{ .Data.data.key }}
          ENCRYPTION_ALGORITHM={{ .Data.data.algorithm }}
          {{- end }}
      
      # ML configuration template
      - destination: /vault/secrets/ml.env
        contents: |
          {{- with secret "its-camera-ai/data/ml/models" -}}
          MODEL_REGISTRY_KEY={{ .Data.data.model_registry_key }}
          MODEL_ENCRYPTION_KEY={{ .Data.data.model_encryption_key }}
          TENSORRT_LICENSE_KEY={{ .Data.data.tensorrt_license_key }}
          {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-agent-injector
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
spec:
  replicas: 2  # High availability
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-agent-injector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-agent-injector
        app.kubernetes.io/component: secrets-management
    spec:
      serviceAccountName: vault-agent-injector
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault-agent-injector
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: vault-agent-injector
        image: hashicorp/vault-k8s:1.3.1
        imagePullPolicy: IfNotPresent
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Environment variables
        env:
        - name: AGENT_INJECT_LISTEN
          value: ":8080"
        - name: AGENT_INJECT_LOG_LEVEL
          value: "info"
        - name: AGENT_INJECT_VAULT_ADDR
          value: "https://vault.its-camera-ai.svc.cluster.local:8200"
        - name: AGENT_INJECT_VAULT_AUTH_PATH
          value: "auth/kubernetes"
        - name: AGENT_INJECT_VAULT_IMAGE
          value: "hashicorp/vault:1.15.4"
        - name: AGENT_INJECT_TLS_AUTO
          value: "vault.its-camera-ai.svc.cluster.local"
        - name: AGENT_INJECT_TLS_AUTO_HOSTS
          value: "vault-agent-injector,vault-agent-injector.its-camera-ai,vault-agent-injector.its-camera-ai.svc,vault-agent-injector.its-camera-ai.svc.cluster.local"
        
        # Ports
        ports:
        - name: webhook
          containerPort: 8080
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook/certs
          readOnly: true
        - name: config
          mountPath: /etc/vault/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      
      # Volumes
      volumes:
      - name: webhook-certs
        secret:
          secretName: vault-agent-injector-certs
      - name: config
        configMap:
          name: vault-agent-injector-config
      - name: tmp
        emptyDir:
          medium: Memory
          sizeLimit: 100Mi

---
apiVersion: v1
kind: Service
metadata:
  name: vault-agent-injector
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: vault-agent-injector

---
# Mutating webhook configuration
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: vault-agent-injector
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/component: secrets-management
webhooks:
- name: vault.hashicorp.com
  clientConfig:
    service:
      name: vault-agent-injector
      namespace: its-camera-ai
      path: /mutate
    caBundle: ""  # Will be populated by cert-manager or manual process
  
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  
  namespaceSelector:
    matchLabels:
      vault-injection: enabled
  
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Ignore

---
# Service accounts for different application services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: api-service
    app.kubernetes.io/component: api
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "its-camera-ai-api"
    vault.hashicorp.com/agent-inject-secret-database: "its-camera-ai/data/database/postgres"
    vault.hashicorp.com/agent-inject-secret-api: "its-camera-ai/data/api/jwt"
    vault.hashicorp.com/agent-inject-template-database: |
      {{- with secret "its-camera-ai/data/database/postgres" -}}
      export DB_HOST="{{ .Data.data.host }}"
      export DB_PORT="{{ .Data.data.port }}"
      export DB_NAME="{{ .Data.data.database }}"
      export DB_USERNAME="{{ .Data.data.username }}"
      export DB_PASSWORD="{{ .Data.data.password }}"
      export DB_SSL_MODE="{{ .Data.data.ssl_mode }}"
      {{- end }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-service
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: ml-service
    app.kubernetes.io/component: ml
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "its-camera-ai-ml"
    vault.hashicorp.com/agent-inject-secret-ml: "its-camera-ai/data/ml/models"
    vault.hashicorp.com/agent-inject-template-ml: |
      {{- with secret "its-camera-ai/data/ml/models" -}}
      export MODEL_REGISTRY_KEY="{{ .Data.data.model_registry_key }}"
      export MODEL_ENCRYPTION_KEY="{{ .Data.data.model_encryption_key }}"
      export TENSORRT_LICENSE_KEY="{{ .Data.data.tensorrt_license_key }}"
      {{- end }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: analytics-service
  namespace: its-camera-ai
  labels:
    app.kubernetes.io/name: analytics-service
    app.kubernetes.io/component: analytics
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "its-camera-ai-analytics"
    vault.hashicorp.com/agent-inject-secret-database: "its-camera-ai/data/database/postgres"
    vault.hashicorp.com/agent-inject-secret-analytics: "its-camera-ai/data/analytics/timescale"