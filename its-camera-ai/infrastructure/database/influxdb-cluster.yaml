# InfluxDB Cluster Configuration for ITS Camera AI System
# Time-series database for metrics, analytics, and monitoring
# Optimized for high-throughput camera telemetry data

apiVersion: influxdata.com/v1alpha1
kind: InfluxDB
metadata:
  name: influxdb-cluster
  namespace: its-camera-ai-system
spec:
  version: "2.7.4"
  replicas: 3

  # Storage configuration for time-series data
  storage:
    size: 5Ti
    storageClassName: fast-ssd
    retentionPolicy:
      defaultRP: "7d"  # Default 7-day retention
      policies:
        - name: "realtime"
          duration: "1h"
          replication: 1
          default: false
        - name: "hourly"
          duration: "30d"
          replication: 1
          default: false
        - name: "daily"
          duration: "1y"
          replication: 1
          default: false
        - name: "monthly"
          duration: "5y"
          replication: 1
          default: true

  # InfluxDB configuration
  config:
    # HTTP settings
    http:
      enabled: true
      bindAddress: ":8086"
      httpsEnabled: false
      maxBodySize: "25MB"
      maxConcurrentWriteLimit: 100
      maxEnqueuedWriteLimit: 1000

    # Data node configuration
    data:
      engine: "tsm1"
      maxSeriesPerDatabase: 1000000
      maxValuesPerTag: 100000

      # Cache settings for high throughput
      cacheMaxMemorySize: "2GB"
      cacheSnapshotMemorySize: "25MB"
      cacheSnapshotWriteColdDuration: "10m"

      # Compaction settings
      compactFullWriteColdDuration: "4h"
      maxPointsPerBlock: 1000

      # WAL settings
      walFsyncDelay: "0s"

    # Coordinator settings
    coordinator:
      writeTimeout: "30s"
      maxConcurrentQueries: 100
      queryTimeout: "60s"
      logQueriesAfter: "10s"
      maxSelectPointN: 100000

    # Retention service
    retention:
      enabled: true
      checkInterval: "30m"

    # Continuous queries
    continuousQueries:
      enabled: true
      logEnabled: true
      queryStatsEnabled: true
      runInterval: "1s"

  # Resource allocation
  resources:
    requests:
      cpu: "2"
      memory: "8Gi"
    limits:
      cpu: "4"
      memory: "16Gi"

  # Node affinity for performance
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: workload
            operator: In
            values: ["general", "database"]
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values: ["influxdb-cluster"]
          topologyKey: kubernetes.io/hostname

  # Monitoring
  monitoring:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s

  # Security
  auth:
    enabled: true

---
# InfluxDB Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: influxdb-init
  namespace: its-camera-ai-system
spec:
  template:
    spec:
      containers:
      - name: influxdb-init
        image: influxdb:2.7.4
        command:
        - /bin/bash
        - -c
        - |
          # Wait for InfluxDB to be ready
          until influx ping --host http://influxdb-cluster:8086; do
            echo "Waiting for InfluxDB to be ready..."
            sleep 5
          done

          # Create organization and buckets
          influx setup \
            --host http://influxdb-cluster:8086 \
            --org its-camera-ai \
            --bucket camera-metrics \
            --username admin \
            --password $INFLUX_PASSWORD \
            --token $INFLUX_TOKEN \
            --force

          # Create additional buckets
          influx bucket create \
            --host http://influxdb-cluster:8086 \
            --token $INFLUX_TOKEN \
            --name camera-telemetry \
            --org its-camera-ai \
            --retention 720h  # 30 days

          influx bucket create \
            --host http://influxdb-cluster:8086 \
            --token $INFLUX_TOKEN \
            --name ml-metrics \
            --org its-camera-ai \
            --retention 2160h  # 90 days

          influx bucket create \
            --host http://influxdb-cluster:8086 \
            --token $INFLUX_TOKEN \
            --name system-metrics \
            --org its-camera-ai \
            --retention 4320h  # 180 days

          influx bucket create \
            --host http://influxdb-cluster:8086 \
            --token $INFLUX_TOKEN \
            --name performance-metrics \
            --org its-camera-ai \
            --retention 168h  # 7 days

          # Create tasks for data aggregation
          cat <<EOF | influx task create --host http://influxdb-cluster:8086 --token $INFLUX_TOKEN
          option task = {
            name: "camera-hourly-aggregation",
            every: 1h,
          }

          from(bucket: "camera-telemetry")
            |> range(start: -1h)
            |> filter(fn: (r) => r._measurement == "camera_stats")
            |> aggregateWindow(every: 1h, fn: mean)
            |> to(bucket: "camera-metrics", org: "its-camera-ai")
          EOF

          cat <<EOF | influx task create --host http://influxdb-cluster:8086 --token $INFLUX_TOKEN
          option task = {
            name: "ml-performance-aggregation",
            every: 5m,
          }

          from(bucket: "ml-metrics")
            |> range(start: -5m)
            |> filter(fn: (r) => r._measurement == "inference_latency")
            |> aggregateWindow(every: 5m, fn: mean)
            |> to(bucket: "performance-metrics", org: "its-camera-ai")
          EOF

          echo "InfluxDB initialization completed successfully"
        env:
        - name: INFLUX_PASSWORD
          valueFrom:
            secretKeyRef:
              name: influxdb-credentials
              key: password
        - name: INFLUX_TOKEN
          valueFrom:
            secretKeyRef:
              name: influxdb-credentials
              key: token
      restartPolicy: OnFailure

---
# InfluxDB Service
apiVersion: v1
kind: Service
metadata:
  name: influxdb-service
  namespace: its-camera-ai-system
spec:
  selector:
    app: influxdb-cluster
  ports:
  - port: 8086
    targetPort: 8086
    name: http
  - port: 8088
    targetPort: 8088
    name: rpc
  type: ClusterIP

---
# Telegraf Configuration for Metrics Collection
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: its-camera-ai-system
data:
  telegraf.conf: |
    [global_tags]
      environment = "production"
      system = "its-camera-ai"

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 5000
      metric_buffer_limit = 50000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "5s"
      precision = ""
      hostname = ""
      omit_hostname = false

    # InfluxDB output
    [[outputs.influxdb_v2]]
      urls = ["http://influxdb-service:8086"]
      token = "$INFLUX_TOKEN"
      organization = "its-camera-ai"
      bucket = "system-metrics"
      timeout = "5s"

    # Kubernetes metrics
    [[inputs.kubernetes]]
      url = "https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true

    # System metrics
    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false

    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

    [[inputs.diskio]]

    [[inputs.mem]]

    [[inputs.net]]

    [[inputs.processes]]

    [[inputs.swap]]

    [[inputs.system]]

    # Docker metrics
    [[inputs.docker]]
      endpoint = "unix:///var/run/docker.sock"
      gather_services = false
      container_names = []
      source_tag = false
      container_name_include = []
      container_name_exclude = []
      timeout = "5s"
      docker_label_include = []
      docker_label_exclude = []

    # Redis metrics
    [[inputs.redis]]
      servers = ["tcp://redis-cluster-service:6379"]
      password = ""

    # PostgreSQL metrics
    [[inputs.postgresql_extensible]]
      address = "postgres://camera_ai_user:$POSTGRES_PASSWORD@pgbouncer-service:5432/its_camera_ai?sslmode=disable"
      databases = ["its_camera_ai"]

      [[inputs.postgresql_extensible.query]]
        sqlquery = "SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = 'active'"
        version = 901
        withdbname = false
        tagvalue = ""

      [[inputs.postgresql_extensible.query]]
        sqlquery = "SELECT schemaname, tablename, n_tup_ins as inserts, n_tup_upd as updates, n_tup_del as deletes FROM pg_stat_user_tables"
        version = 901
        withdbname = false
        tagvalue = "schemaname,tablename"

    # Custom camera metrics
    [[inputs.http]]
      urls = [
        "http://camera-stream-service:8080/metrics",
        "http://ml-inference-service:8080/metrics",
        "http://event-processor-service:8080/metrics"
      ]
      timeout = "5s"
      method = "GET"
      headers = {"Accept" = "application/json"}
      data_format = "json"
      name_override = "camera_service_metrics"
      tag_keys = ["service", "camera_id"]

---
# Telegraf Deployment
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf
  namespace: its-camera-ai-system
spec:
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      serviceAccountName: telegraf
      containers:
      - name: telegraf
        image: telegraf:1.28.5
        env:
        - name: INFLUX_TOKEN
          valueFrom:
            secretKeyRef:
              name: influxdb-credentials
              key: token
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-cluster-app
              key: password
        - name: KUBERNETES_SERVICE_HOST
          value: kubernetes.default.svc.cluster.local
        - name: KUBERNETES_SERVICE_PORT
          value: "443"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: config
          mountPath: /etc/telegraf/telegraf.conf
          subPath: telegraf.conf
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: telegraf-config
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      hostNetwork: true
      hostPID: true

---
# Telegraf Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telegraf
  namespace: its-camera-ai-system

---
# Telegraf Cluster Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: telegraf
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
# Telegraf Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telegraf
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telegraf
subjects:
- kind: ServiceAccount
  name: telegraf
  namespace: its-camera-ai-system

---
# InfluxDB Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: influxdb-backup
  namespace: its-camera-ai-system
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: influxdb-backup
            image: influxdb:2.7.4
            command:
            - /bin/bash
            - -c
            - |
              DATE=$(date +"%Y%m%d_%H%M%S")
              BACKUP_PATH="/tmp/influx_backup_${DATE}"

              # Create backup
              influx backup \
                --host http://influxdb-service:8086 \
                --token $INFLUX_TOKEN \
                --org its-camera-ai \
                $BACKUP_PATH

              # Compress backup
              tar -czf "${BACKUP_PATH}.tar.gz" -C /tmp "influx_backup_${DATE}"

              # Upload to S3 (requires AWS credentials)
              # aws s3 cp "${BACKUP_PATH}.tar.gz" s3://its-camera-ai-backups/influxdb/

              # Cleanup old backups (keep last 7 days)
              find /tmp -name "influx_backup_*.tar.gz" -mtime +7 -delete

              echo "Backup completed: ${BACKUP_PATH}.tar.gz"
            env:
            - name: INFLUX_TOKEN
              valueFrom:
                secretKeyRef:
                  name: influxdb-credentials
                  key: token
          restartPolicy: OnFailure

---
# InfluxDB Monitoring Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: influxdb-dashboard
  namespace: its-camera-ai-system
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "ITS Camera AI - InfluxDB Metrics",
        "tags": ["its-camera-ai", "influxdb"],
        "panels": [
          {
            "title": "Camera Frame Rate",
            "type": "graph",
            "targets": [
              {
                "query": "from(bucket: \"camera-telemetry\") |> range(start: -1h) |> filter(fn: (r) => r._measurement == \"camera_fps\")"
              }
            ]
          },
          {
            "title": "ML Inference Latency",
            "type": "graph",
            "targets": [
              {
                "query": "from(bucket: \"ml-metrics\") |> range(start: -1h) |> filter(fn: (r) => r._measurement == \"inference_latency\")"
              }
            ]
          },
          {
            "title": "Active Cameras",
            "type": "singlestat",
            "targets": [
              {
                "query": "from(bucket: \"camera-metrics\") |> range(start: -5m) |> filter(fn: (r) => r._measurement == \"active_cameras\") |> last()"
              }
            ]
          },
          {
            "title": "System Resource Usage",
            "type": "graph",
            "targets": [
              {
                "query": "from(bucket: \"system-metrics\") |> range(start: -1h) |> filter(fn: (r) => r._measurement == \"cpu\" or r._measurement == \"mem\")"
              }
            ]
          }
        ]
      }
    }