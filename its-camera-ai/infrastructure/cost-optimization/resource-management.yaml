# Cost Optimization and Resource Management for ITS Camera AI System
# Multi-cloud deployment strategy with reserved instances and spot pricing
# Automated cost monitoring and resource right-sizing

apiVersion: v1
kind: Namespace
metadata:
  name: cost-optimization
  labels:
    purpose: cost-management

---
# Multi-Cloud Deployment Strategy
apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-cloud-config
  namespace: cost-optimization
data:
  deployment-strategy.yaml: |
    # Multi-cloud deployment configuration for cost optimization
    cloudProviders:
      aws:
        primary: true
        regions:
          - name: "us-west-2"
            primary: true
            costTier: "standard"
            availability: "99.9%"
            services:
              - compute: "ec2"
              - storage: "ebs"
              - database: "rds"
              - cache: "elasticache"
              - ml: "sagemaker"
          - name: "us-east-1"
            backup: true
            costTier: "low"
            availability: "99.5%"
        
        instanceTypes:
          # Production workloads
          production:
            compute: "c5.xlarge,c5.2xlarge"
            gpu: "g4dn.xlarge,g4dn.2xlarge"
            memory: "r5.xlarge,r5.2xlarge"
            storage: "i3.xlarge,i3.2xlarge"
          
          # Development/staging workloads
          development:
            compute: "t3.large,t3.xlarge"
            gpu: "g4dn.xlarge"
            memory: "r5.large,r5.xlarge"
            storage: "gp3"
      
      gcp:
        secondary: true
        regions:
          - name: "us-central1"
            backup: true
            costTier: "low"
            availability: "99.5%"
        
        instanceTypes:
          production:
            compute: "n2-standard-4,n2-standard-8"
            gpu: "n1-standard-4-k80,n1-standard-8-k80"
            memory: "n2-highmem-4,n2-highmem-8"
      
      azure:
        tertiary: true
        regions:
          - name: "eastus2"
            disaster_recovery: true
            costTier: "minimal"
            availability: "99.0%"
        
        instanceTypes:
          production:
            compute: "Standard_D4s_v3,Standard_D8s_v3"
            gpu: "Standard_NC6,Standard_NC12"
    
    # Cost optimization strategies
    costOptimization:
      reservedInstances:
        enabled: true
        commitment: "1year"  # 1 year reserved instances
        paymentOption: "partial-upfront"
        utilization: 60  # Reserve 60% of steady-state capacity
        services: ["compute", "database", "cache"]
      
      spotInstances:
        enabled: true
        maxPercentage: 40  # Up to 40% spot instances
        services: ["ml-training", "batch-processing", "development"]
        interruptionHandling: "graceful-shutdown"
        diversification: "multiple-az"
      
      scheduledScaling:
        enabled: true
        patterns:
          weekdays:
            scale_up: "06:00"
            scale_down: "22:00"
            factor: 1.5
          weekends:
            scale_up: "08:00"
            scale_down: "20:00"
            factor: 0.8
          nights:
            scale_down: "01:00"
            scale_up: "05:00"
            factor: 0.3
      
      rightSizing:
        enabled: true
        analysisWindow: "7d"
        cpuTarget: 70
        memoryTarget: 80
        recommendations:
          frequency: "weekly"
          autoApply: false
          threshold: 20  # Apply if >20% cost savings

---
# AWS Cost Management Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-cost-config
  namespace: cost-optimization
data:
  aws-config.yaml: |
    # AWS-specific cost optimization
    ec2:
      reservedInstances:
        # Production workloads - 1 year reserved
        - instanceType: "c5.xlarge"
          count: 20
          term: "1yr"
          paymentOption: "partial-upfront"
          utilization: "high"
        - instanceType: "g4dn.xlarge"
          count: 10
          term: "1yr"
          paymentOption: "partial-upfront"
          utilization: "high"
        - instanceType: "r5.xlarge"
          count: 8
          term: "1yr"
          paymentOption: "partial-upfront"
          utilization: "high"
      
      spotInstances:
        # Development and batch workloads
        - instanceTypes: ["c5.large", "c5.xlarge", "c5.2xlarge"]
          maxPrice: "0.10"  # 50% of on-demand
          diversification: true
          autoTermination: true
        - instanceTypes: ["g4dn.xlarge", "g4dn.2xlarge"]
          maxPrice: "0.30"  # 60% of on-demand
          workload: "ml-training"
      
      savingsPlans:
        enabled: true
        commitment: "$50000/year"  # $50k annual commitment
        paymentOption: "all-upfront"
        scope: "compute"
    
    rds:
      reservedInstances:
        - instanceClass: "db.r5.xlarge"
          count: 3
          term: "1yr"
          multiAZ: true
        - instanceClass: "db.r5.2xlarge"
          count: 2
          term: "1yr"
          multiAZ: true
      
      optimization:
        performanceInsights: true
        automated_backups_retention: 7
        deletion_protection: true
        storage_type: "gp3"
    
    elasticache:
      reservedNodes:
        - nodeType: "cache.r6g.xlarge"
          count: 6
          term: "1yr"
          paymentOption: "partial-upfront"
    
    storage:
      s3:
        intelligentTiering: true
        lifecyclePolicies:
          - name: "camera-data-lifecycle"
            transitions:
              - days: 30
                storageClass: "STANDARD_IA"
              - days: 90
                storageClass: "GLACIER"
              - days: 365
                storageClass: "DEEP_ARCHIVE"
      
      ebs:
        defaultType: "gp3"
        optimization:
          deleteOnTermination: true
          encryption: true
          monitoring: true

---
# Resource Right-sizing Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rightsizing-config
  namespace: cost-optimization
data:
  rightsizing-rules.yaml: |
    # Automated resource right-sizing rules
    rightSizingRules:
      # CPU-based recommendations
      cpu:
        underutilized:
          threshold: 20  # <20% CPU usage
          window: "7d"
          action: "downsize"
          minSavings: 15  # Minimum 15% cost savings
        overutilized:
          threshold: 90  # >90% CPU usage
          window: "24h"
          action: "upsize"
          performanceImpact: "high"
      
      # Memory-based recommendations
      memory:
        underutilized:
          threshold: 30  # <30% memory usage
          window: "7d"
          action: "memory-optimized"
          minSavings: 10
        overutilized:
          threshold: 95  # >95% memory usage
          window: "1h"
          action: "upsize"
          priority: "critical"
      
      # GPU-based recommendations
      gpu:
        underutilized:
          threshold: 25  # <25% GPU usage
          window: "7d"
          action: "downsize-gpu"
          minSavings: 25  # GPU instances are expensive
        overutilized:
          threshold: 95  # >95% GPU usage
          window: "30m"
          action: "upsize-gpu"
          priority: "high"
      
      # Storage-based recommendations
      storage:
        underutilized:
          threshold: 50  # <50% storage usage
          window: "14d"
          action: "resize-volume"
          minSavings: 20
        iopsUnderutilized:
          threshold: 30  # <30% IOPS usage
          window: "7d"
          action: "standard-storage"
    
    # Application-specific rules
    applicationRules:
      ml-inference:
        preferredInstanceTypes: ["g4dn.xlarge", "g4dn.2xlarge"]
        cpuTarget: 70
        memoryTarget: 80
        gpuTarget: 85
        minReplicas: 2
        maxReplicas: 20
      
      camera-processor:
        preferredInstanceTypes: ["c5.xlarge", "c5.2xlarge"]
        cpuTarget: 75
        memoryTarget: 70
        networkOptimized: true
        minReplicas: 5
        maxReplicas: 50
      
      database:
        preferredInstanceTypes: ["r5.xlarge", "r5.2xlarge"]
        cpuTarget: 60
        memoryTarget: 85
        storageOptimized: true
        multiAZ: true
      
      cache:
        preferredInstanceTypes: ["cache.r6g.xlarge"]
        memoryTarget: 90
        networkOptimized: true
        replication: true

---
# Cost Monitoring and Alerting
apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-monitoring-config
  namespace: cost-optimization
data:
  cost-alerts.yaml: |
    # Cost monitoring and alerting configuration
    costAlerts:
      # Daily cost alerts
      daily:
        - name: "daily-spend-warning"
          threshold: 5000  # $5000/day
          severity: "warning"
          recipients: ["finance@its-camera-ai.com", "ops@its-camera-ai.com"]
        - name: "daily-spend-critical"
          threshold: 7500  # $7500/day
          severity: "critical"
          recipients: ["cto@its-camera-ai.com", "finance@its-camera-ai.com"]
      
      # Monthly cost alerts
      monthly:
        - name: "monthly-budget-warning"
          threshold: 120000  # $120k/month
          severity: "warning"
          forecast: true
        - name: "monthly-budget-critical"
          threshold: 150000  # $150k/month
          severity: "critical"
          forecast: true
      
      # Service-specific alerts
      services:
        compute:
          threshold: 80000  # $80k/month for compute
          severity: "warning"
        gpu:
          threshold: 30000  # $30k/month for GPU
          severity: "warning"
        storage:
          threshold: 15000  # $15k/month for storage
          severity: "info"
        network:
          threshold: 10000  # $10k/month for network
          severity: "info"
    
    # Cost anomaly detection
    anomalyDetection:
      enabled: true
      sensitivity: "medium"
      lookbackPeriod: "30d"
      alerts:
        - name: "unusual-spend-increase"
          threshold: 25  # 25% increase over baseline
          severity: "warning"
        - name: "cost-spike"
          threshold: 50  # 50% increase over baseline
          severity: "critical"
    
    # Budget controls
    budgets:
      total:
        monthly: 150000  # $150k/month total budget
        actions:
          - threshold: 80  # 80% of budget
            action: "alert"
          - threshold: 95  # 95% of budget
            action: "restrict-scaling"
          - threshold: 100  # 100% of budget
            action: "emergency-scale-down"
      
      development:
        monthly: 20000  # $20k/month for dev environment
        actions:
          - threshold: 90
            action: "auto-shutdown"
      
      production:
        monthly: 120000  # $120k/month for production
        actions:
          - threshold: 85
            action: "approval-required"

---
# Cost Optimization Jobs
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cost-analysis-job
  namespace: cost-optimization
spec:
  schedule: "0 6 * * *"  # Daily at 6 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cost-analyzer
            image: its-camera-ai/cost-analyzer:latest
            command:
            - /bin/bash
            - -c
            - |
              # Daily cost analysis and recommendations
              echo "Starting daily cost analysis..."
              
              # Analyze resource utilization
              python /app/analyze_utilization.py \
                --window 24h \
                --output /tmp/utilization_report.json
              
              # Generate right-sizing recommendations
              python /app/rightsizing_recommendations.py \
                --input /tmp/utilization_report.json \
                --min-savings 15 \
                --output /tmp/recommendations.json
              
              # Check for unused resources
              python /app/unused_resources.py \
                --age 7d \
                --output /tmp/unused_resources.json
              
              # Generate cost report
              python /app/generate_cost_report.py \
                --period yesterday \
                --format json \
                --output /tmp/daily_cost_report.json
              
              # Send notifications if significant savings found
              SAVINGS=$(jq '.total_potential_savings' /tmp/recommendations.json)
              if (( $(echo "$SAVINGS > 1000" | bc -l) )); then
                python /app/send_notifications.py \
                  --type cost-optimization \
                  --data /tmp/recommendations.json
              fi
              
              # Store reports in S3 for historical analysis
              aws s3 cp /tmp/ s3://its-camera-ai-cost-reports/$(date +%Y/%m/%d)/ --recursive
              
              echo "Cost analysis completed"
            env:
            - name: AWS_DEFAULT_REGION
              value: us-west-2
            - name: COST_THRESHOLD
              value: "1000"  # $1000 minimum savings threshold
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: 1
                memory: 2Gi
          restartPolicy: OnFailure

---
# Spot Instance Management
apiVersion: batch/v1
kind: CronJob
metadata:
  name: spot-instance-optimizer
  namespace: cost-optimization
spec:
  schedule: "0 */4 * * *"  # Every 4 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: spot-optimizer
            image: its-camera-ai/spot-optimizer:latest
            command:
            - /bin/bash
            - -c
            - |
              # Optimize spot instance usage
              echo "Starting spot instance optimization..."
              
              # Check current spot prices
              python /app/check_spot_prices.py \
                --regions us-west-2,us-east-1 \
                --instance-types c5.xlarge,c5.2xlarge,g4dn.xlarge \
                --output /tmp/spot_prices.json
              
              # Analyze workload suitability for spot
              python /app/analyze_spot_suitability.py \
                --namespace its-camera-ai-system \
                --output /tmp/spot_candidates.json
              
              # Generate spot recommendations
              python /app/generate_spot_recommendations.py \
                --prices /tmp/spot_prices.json \
                --candidates /tmp/spot_candidates.json \
                --max-interruption-rate 10 \
                --output /tmp/spot_recommendations.json
              
              # Apply recommendations if savings > threshold
              SAVINGS=$(jq '.total_savings' /tmp/spot_recommendations.json)
              if (( $(echo "$SAVINGS > 500" | bc -l) )); then
                python /app/apply_spot_recommendations.py \
                  --input /tmp/spot_recommendations.json \
                  --dry-run false
              fi
              
              echo "Spot instance optimization completed"
            resources:
              requests:
                cpu: 200m
                memory: 512Mi
              limits:
                cpu: 500m
                memory: 1Gi
          restartPolicy: OnFailure

---
# Resource Cleanup Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: resource-cleanup
  namespace: cost-optimization
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: resource-cleaner
            image: its-camera-ai/resource-cleaner:latest
            command:
            - /bin/bash
            - -c
            - |
              # Clean up unused resources
              echo "Starting resource cleanup..."
              
              # Find and delete unused volumes
              python /app/cleanup_volumes.py \
                --age 7d \
                --dry-run false
              
              # Clean up old snapshots
              python /app/cleanup_snapshots.py \
                --retention 30d \
                --dry-run false
              
              # Remove unused load balancers
              python /app/cleanup_load_balancers.py \
                --unused-duration 24h \
                --dry-run false
              
              # Clean up terminated instances
              python /app/cleanup_instances.py \
                --state terminated \
                --age 24h
              
              # Remove old log groups
              python /app/cleanup_log_groups.py \
                --retention 90d \
                --dry-run false
              
              echo "Resource cleanup completed"
            resources:
              requests:
                cpu: 200m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
          restartPolicy: OnFailure

---
# Cost Dashboard Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-dashboard-config
  namespace: cost-optimization
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "ITS Camera AI - Cost Optimization Dashboard",
        "tags": ["cost", "optimization"],
        "panels": [
          {
            "title": "Daily Spend Trend",
            "type": "graph",
            "targets": [
              {
                "query": "aws_billing_estimated_charges",
                "legendFormat": "Daily Spend"
              }
            ]
          },
          {
            "title": "Cost by Service",
            "type": "pie",
            "targets": [
              {
                "query": "sum by (service) (aws_cost_by_service)"
              }
            ]
          },
          {
            "title": "Reserved vs On-Demand Usage",
            "type": "stat",
            "targets": [
              {
                "query": "sum(aws_reserved_instance_utilization)",
                "legendFormat": "Reserved Instance Utilization"
              }
            ]
          },
          {
            "title": "Spot Instance Savings",
            "type": "stat",
            "targets": [
              {
                "query": "sum(aws_spot_instance_savings)",
                "legendFormat": "Monthly Spot Savings"
              }
            ]
          },
          {
            "title": "Right-sizing Recommendations",
            "type": "table",
            "targets": [
              {
                "query": "rightsizing_recommendations"
              }
            ]
          }
        ]
      }
    }