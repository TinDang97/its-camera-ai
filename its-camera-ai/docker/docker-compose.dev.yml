# Development Environment Override for ITS Camera AI
# Optimized for development workflow with hot reload, debugging, and comprehensive tooling
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml --profile dev up

version: '3.8'

services:
  # Development Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: its-camera-ai-dev
    environment:
      # Development-specific environment
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - RELOAD=true
      - DEV_MODE=true
      # Enhanced development features
      - FASTAPI_ENV=development
      - PYTEST_CURRENT_TEST=${PYTEST_CURRENT_TEST:-}
      # Database settings for development
      - DATABASE_ECHO=true
      - DATABASE_POOL_PRE_PING=true
      # Redis development settings
      - REDIS_DECODE_RESPONSES=true
      # ML development optimizations
      - PYTORCH_JIT=0
      - CUDA_LAUNCH_BLOCKING=1
      # Performance profiling
      - PYTHONPROFILEIMPORTS=1
    ports:
      # Application and metrics
      - "8000:8000"
      - "8001:8001"
      # Debugger ports
      - "5678:5678"  # Python debugger
      - "9229:9229"  # Node.js debugger (if needed)
      # Development tools
      - "8080:8080"  # Alternative dev server
    volumes:
      # Hot reload volumes with optimized mount options
      - ${PWD}/src:/app/src:cached
      - ${PWD}/tests:/app/tests:cached
      - ${PWD}/docs:/app/docs:cached
      # Development configuration
      - ${PWD}/.env.dev:/app/.env:ro
      - ${PWD}/pyproject.toml:/app/pyproject.toml:ro
      - ${PWD}/pytest.ini:/app/pytest.ini:ro
      - ${PWD}/.coveragerc:/app/.coveragerc:ro
      # Development data persistence
      - dev_data:/app/data
      - dev_logs:/app/logs
      - dev_models:/app/models
      - dev_temp:/app/temp
      # Development cache for faster rebuilds
      - dev_cache:/app/cache
      - dev_pip_cache:/root/.cache/pip
      - dev_uv_cache:/app/cache/uv
    command: >
      sh -c "
        echo 'Starting ITS Camera AI Development Server...' &&
        uvicorn its_camera_ai.main:app
          --host 0.0.0.0
          --port 8000
          --reload
          --reload-dir /app/src
          --reload-include='*.py'
          --reload-include='*.yml'
          --reload-include='*.yaml'
          --reload-include='*.json'
          --log-level debug
          --access-log
          --use-colors
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "-H", "Accept: application/json"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Development Database with enhanced features
  postgres:
    environment:
      # Development database settings
      - POSTGRES_INITDB_ARGS=--auth-host=md5
      - POSTGRES_HOST_AUTH_METHOD=md5
      # Enhanced logging for development
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=0
    ports:
      - "5432:5432"  # Expose for external connections
    volumes:
      # Development-specific init scripts
      - ${PWD}/infrastructure/database/init/dev:/docker-entrypoint-initdb.d:ro
      # Development data persistence
      - dev_postgres_data:/var/lib/postgresql/data
    command: >
      postgres
        -c log_statement=all
        -c log_destination=stderr
        -c log_min_duration_statement=0
        -c log_connections=on
        -c log_disconnections=on
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # Development Redis with debugging
  redis:
    ports:
      - "6379:6379"  # Expose for external connections
    command: >
      redis-server
        --appendonly yes
        --save 60 1000
        --loglevel debug
        --requirepass redis_password
    volumes:
      - dev_redis_data:/data
      - ${PWD}/infrastructure/redis/redis-dev.conf:/usr/local/etc/redis/redis.conf:ro

  # InfluxDB with development settings
  influxdb:
    ports:
      - "8086:8086"
    volumes:
      - dev_influxdb_data:/var/lib/influxdb2
      - dev_influxdb_config:/etc/influxdb2

  # MinIO with development optimizations
  minio:
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - dev_minio_data:/data
      - dev_minio_cache1:/mnt/cache1
      - dev_minio_cache2:/mnt/cache2

  # Kafka with development settings
  kafka:
    ports:
      - "9092:9092"
    volumes:
      - dev_kafka_data:/var/lib/kafka/data
    environment:
      - KAFKA_LOG_LEVEL=DEBUG
      - KAFKA_ROOT_LOG_LEVEL=DEBUG

  # Development Tools and Services
  # Adminer for Database Management
  adminer:
    image: adminer:4.8.1
    container_name: its-camera-ai-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - its-network
    profiles:
      - dev

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: its-camera-ai-redis-commander
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - its-network
    profiles:
      - dev

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: its-camera-ai-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_UI_PORT:-8025}:8025"
    networks:
      - its-network
    profiles:
      - dev

  # Development File Watcher for Advanced Hot Reload
  file-watcher:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: its-camera-ai-file-watcher
    volumes:
      - ${PWD}/src:/app/src:ro
      - ${PWD}/tests:/app/tests:ro
    command: >
      sh -c "
        pip install watchdog &&
        watchmedo auto-restart
          --patterns='*.py;*.yml;*.yaml;*.json'
          --recursive
          --directory=/app/src
          -- echo 'Files changed, triggering restart...'
      "
    networks:
      - its-network
    profiles:
      - dev
      - advanced

# Development-specific volumes with optimized drivers
volumes:
  dev_data:
    driver: local
  dev_logs:
    driver: local
  dev_models:
    driver: local
  dev_temp:
    driver: local
  dev_cache:
    driver: local
  dev_pip_cache:
    driver: local
  dev_uv_cache:
    driver: local
  dev_postgres_data:
    driver: local
  dev_redis_data:
    driver: local
  dev_influxdb_data:
    driver: local
  dev_influxdb_config:
    driver: local
  dev_minio_data:
    driver: local
  dev_minio_cache1:
    driver: local
  dev_minio_cache2:
    driver: local
  dev_kafka_data:
    driver: local

# Development network with custom configuration
networks:
  its-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: its-dev-bridge
      com.docker.network.driver.mtu: 1500