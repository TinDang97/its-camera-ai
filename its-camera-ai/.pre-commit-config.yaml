# Pre-commit hooks for ITS Camera AI
# See https://pre-commit.com for more information

repos:
  # Ruff - Fast Python linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.8
    hooks:
      # Run the linter
      - id: ruff
        args: [--fix]
        types_or: [python, pyi, jupyter]
      # Run the formatter
      - id: ruff-format
        types_or: [python, pyi, jupyter]

  # # Black - Python code formatter (disabled in favor of ruff-format)
  # - repo: https://github.com/psf/black
  #   rev: 25.1.0
  #   hooks:
  #     - id: black
  #       language_version: python3.12
  #       types_or: [python, pyi]

  # # isort - Import sorting (disabled - ruff handles imports)
  # - repo: https://github.com/pycqa/isort
  #   rev: 6.0.1
  #   hooks:
  #     - id: isort
  #       types_or: [python, pyi]
  #       args: [--profile=black]

  # MyPy - Static type checker
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-redis
          - types-passlib
          - sqlalchemy[mypy]
          - pydantic
          - pydantic-settings
          - fastapi
          - types-pyyaml
          - types-protobuf
          - grpc-stubs
        exclude: ^(migrations/|tests/|src/its_camera_ai/proto/.*_pb2.*\.py$)
        args:
          [
            --ignore-missing-imports,
            --scripts-are-modules,
            --disable-error-code=unused-ignore,
            --no-error-summary,
          ]

  # Built-in pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # General file checks
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
        exclude: \.md$
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements

      # Python-specific checks
      - id: check-ast
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker

      # Security checks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        args: [-r, -x, tests/, --skip, B101, --severity-level, medium]
        exclude: ^tests/
        # Fail on high/critical security issues
        fail_fast: true

  # # Safety - Check for known security vulnerabilities
  # - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
  #   rev: v1.3.2
  #   hooks:
  #     - id: python-safety-dependencies-check
  #       files: pyproject.toml
  #       args: [--ignore, "70612"] # Ignore jinja2 in jupyter

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        entry: hadolint
        language: docker_image
        types: [dockerfile]
        args: [--ignore, DL3008, --ignore, DL3009, --ignore, DL3015]

  # Commit message validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.1.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: ["--strict"]

  # File size checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-added-large-files
        args: [--maxkb=10000] # 10MB limit
      - id: mixed-line-ending
        args: [--fix=lf]

  # Quality gates - local hooks
  - repo: local
    hooks:
      # Fast unit tests for pre-commit
      - id: pytest-unit
        name: pytest-unit-tests
        entry: pytest
        language: system
        pass_filenames: false
        always_run: false
        args:
          [
            "--tb=short",
            "-x",
            "-q",
            "tests/unit/",
            "--maxfail=1",
            "-m",
            "not slow",
            "--ignore=src/its_camera_ai/web",
          ]
        stages: [pre-commit]

        # Full test suite for pre-push
      - id: pytest-full
        name: pytest-full-suite
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args:
          [
            "--cov=src/its_camera_ai",
            "--cov-fail-under=90",
            "--tb=short",
            "-x",
            "--maxfail=1",
            "--ignore=src/its_camera_ai/web",
          ]
        stages: [pre-push]

      # Security check with fail on P0 issues
      - id: security-check
        name: security-p0-check
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        args:
          [
            "-c",
            'bandit -r src/ -f json -o /tmp/bandit.json && jq ''.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")'' /tmp/bandit.json | grep -q . && echo ''P0 security issues found'' && exit 1 || echo ''No P0 security issues''',
          ]
        stages: [pre-push]

      # Code complexity check
      - id: complexity-check
        name: code-complexity-check
        entry: radon
        language: system
        args: ["cc", "src/", "--min", "C", "--show-complexity"]
        pass_filenames: false
        always_run: true
        stages: [pre-push]

# Global settings
default_stages: [pre-commit]
fail_fast: true
minimum_pre_commit_version: "3.0.0"

# CI settings
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
