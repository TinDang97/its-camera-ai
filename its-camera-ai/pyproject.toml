[project]
name = "its-camera-ai"
version = "0.1.0"
description = "AI Camera Traffic Monitoring System - Real-time traffic analytics and vehicle tracking"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "ITS Camera AI Team", email = "team@its-camera-ai.com"},
]
keywords = ["ai", "computer-vision", "traffic-monitoring", "pytorch", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core production dependencies
dependencies = [
    # Web Framework & API
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "pydantic[email]>=2.9.2",
    "pydantic-settings>=2.10.1",
    # Async & Concurrency
    "asyncio-mqtt>=0.16.2",
    "aioredis>=2.0.1",
    "httpx>=0.28.1",
    "aiosmtplib>=3.0.0",
    # gRPC & Protocol Buffers
    "grpcio>=1.68.1",
    "grpcio-tools>=1.68.1",
    "protobuf>=5.29.5",
    "grpcio-status>=1.68.1",
    # WebRTC Support
    "aiortc>=1.6.0",
    "aioice>=0.9.0",
    # Computer Vision & ML
    "torch>=2.8.0",
    "torchvision>=0.23.0",
    "ultralytics>=8.3.177",
    "opencv-python-headless>=4.8.1",
    "numpy<2.2.5",
    "pillow>=11.3.0",
    # Data Processing
    "pandas>=2.3.1",
    "pyarrow>=21.0.0",
    "polars>=1.32.2",
    # Database & Storage
    "sqlalchemy[asyncio]>=2.0.43",
    "asyncpg>=0.30.0",
    "redis>=6.4.0",
    "minio>=7.2.16",
    # Time Series & Analytics (using TimescaleDB via psycopg)
    "prometheus-client>=0.22.1",
    # Security & Authentication
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "cryptography>=42.0.0",
    "PyJWT>=2.8.0",
    "bcrypt>=4.1.0",
    "pyotp>=2.9.0",
    "qrcode>=8.0.1",
    "jinja2>=3.1.4",
    "requests>=2.31.0",
    "pyyaml>=6.0.1",
    # Configuration & Environment
    "python-dotenv>=1.1.1",
    "structlog>=25.4.0",
    "rich>=14.1.0",
    "typer>=0.15.1",
    # Enhanced CLI dependencies
    "inquirer>=3.4.0",
    "click-completion>=0.5.2",
    "click-aliases>=1.0.4",
    "pygments>=2.18.0",
    "tabulate>=0.9.0",
    "psutil>=6.1.0",
    "click-repl>=0.3.0",
    "colorama>=0.4.6",
    "packaging>=24.2",
    # Monitoring & Observability
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-instrumentation-fastapi>=0.57b0",
    "sentry-sdk[fastapi]>=2.34.1",
    "onnx>=1.18.0",
    "onnxruntime>=1.22.1",
    "dependency-injector>=4.48.1",
    "alembic>=1.16.4",
    "psycopg2-binary>=2.9.10",
    # HTTP Client & Docker
    "aiohttp>=3.10.0",
    "docker>=7.1.0",
    # AWS Services
    "boto3>=1.35.0",
    "botocore>=1.35.0",
    # Data Science & Visualization
    "scikit-learn>=1.5.2",
    "seaborn>=0.13.2",
    "matplotlib>=3.9.0",
    "aiokafka>=0.12.0",
    "blosc>=1.11.3",
]

[dependency-groups]
dev = [
    # Type Checking & Linting
    "mypy>=1.17.1",
    "ruff>=0.12.8",
    "black>=25.1.0",
    "isort>=6.0.1",
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-benchmark>=5.1.0",
    "hypothesis>=6.137.2",
    # Development Tools
    "pre-commit>=4.3.0",
    "bandit[toml]>=1.8.6",
    "safety>=3.6.0",
    "pip-audit>=2.9.0",
    # Documentation
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.1",
    # Type Stubs
    "types-passlib>=1.7.7.20250602",
    "types-redis>=4.6.0.20241004",
    "types-pillow>=10.2.0.20240822",
    "types-setuptools>=80.9.0.20250809",
    "radon>=6.0.1",
    "types-pyyaml>=6.0.12.20250809",
    "types-protobuf>=6.30.2.20250809",
    "grpc-stubs>=1.53.0.6",
    # Additional type stubs
    "types-python-jose>=3.3.4.20240106",
    "types-psutil>=6.1.0.20250809",
    "types-qrcode>=8.0.0.20241213",
    "types-docker>=7.1.0.20250809",
    "types-boto3>=1.0.2",
    "types-aiofiles>=24.1.0.20240626",
    "types-requests>=2.31.0.20250809",
]

ml = [
    # Extended ML Dependencies
    "scikit-learn>=1.7.1",
    "xgboost>=3.0.4",
    "optuna>=4.4.0",
    "mlflow>=3.2.0",
    "tensorboard>=2.20.0",
    "wandb>=0.19.0",
    # Model formats and optimization
    "onnx>=1.16.0",
    "onnxruntime-gpu>=1.19.0",
    "onnxsim>=0.4.36",
    # Model serving and deployment
    "torchserve>=0.12.0",
    # Performance profiling
    "py-spy>=0.3.12",
]

gpu = [
    # GPU-specific dependencies
    # Note: GPU packages often require specific CUDA versions
    # Install manually if needed: pip install triton cupy-cuda12x
]

linux = [
    # Linux system monitoring
    "psutil>=6.1.0",
    "py-cpuinfo>=9.0.0",
]

macos = [
    # macOS-specific dependencies
    "coremltools>=8.2.0",
    "ane-transformers>=0.1.0",
    # macOS system monitoring
    "psutil>=6.1.0",
]

edge = [
    # Edge deployment dependencies
    "optimum[onnxruntime]>=1.27.0",
    "openvino>=2024.2.0",
]

tensorrt = [
    # TensorRT-specific dependencies (Linux only)
    # Note: TensorRT packages require manual installation from NVIDIA
    "polygraphy>=0.49.0",
]

coreml = [
    # CoreML-specific dependencies (macOS only)
    "coremltools>=8.2.0",
    "ane-transformers>=0.1.0",
]

inference = [
    # Inference optimization dependencies
    "tritonclient[all]>=2.32.0",
    "bentoml>=1.3.28",
    "ray[serve]>=2.38.0",
    "torchserve>=0.12.0",
]

[project.scripts]
its-camera-ai = "its_camera_ai.cli.main:app"

[project.urls]
Homepage = "https://github.com/your-org/its-camera-ai"
Documentation = "https://its-camera-ai.readthedocs.io"
Repository = "https://github.com/your-org/its-camera-ai.git"
Issues = "https://github.com/your-org/its-camera-ai/issues"

# Build System Configuration
[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

# Tool Configuration
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["its_camera_ai*"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | build
    | dist
    | migrations
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Ruff Configuration
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
    "dist",
    "migrations",
    "tests",
    "scripts",
    "reports",
    "alembic",
    ".ruff_cache",
    ".serena",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # bandit security checks
    "W293", # blank line contains whitespace
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # assert used (OK in tests)
    "S311",  # random module (OK for non-crypto use)
    "S324",  # hashlib (OK for non-security use)
    "S603",  # subprocess (OK with validation)
    "S607",  # partial path (OK with validation)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG002", "ARG001", "S311", "S324"]
"scripts/*" = ["S603", "S607"]

# MyPy Configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
exclude = [
    "src/its_camera_ai/proto/.*_pb2.*\\.py$",
]

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "ultralytics.*",
    "kafka.*",
    "redis.*",
    "minio.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=its_camera_ai",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "ml: marks tests for ML models",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks performance benchmark tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src/its_camera_ai"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]
