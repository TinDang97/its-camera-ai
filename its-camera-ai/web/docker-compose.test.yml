# Docker Compose configuration for web application testing
# Supports Puppeteer E2E tests, performance testing, and CI/CD integration

version: '3.8'

services:
  # Web application for testing
  web-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: its-camera-ai-web-test
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_WS_URL=ws://api:8001
      - CI=true
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - test-network

  # Backend API for testing
  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: development
    container_name: its-camera-ai-api-test
    ports:
      - "8002:8000"
      - "8003:8001"
    environment:
      - ENVIRONMENT=testing
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://test_user:test_password@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/1
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=["http://localhost:3002"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - test-network

  # Test database
  postgres:
    image: postgres:15-alpine
    container_name: its-camera-ai-postgres-test
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - test-network

  # Test Redis
  redis:
    image: redis:7-alpine
    container_name: its-camera-ai-redis-test
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - test-network

  # Puppeteer test runner
  puppeteer-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: its-camera-ai-puppeteer
    volumes:
      - .:/app
      - ./tests/reports:/app/tests/reports
      - ./tests/screenshots:/app/tests/screenshots
      - ./tests/videos:/app/tests/videos
      - /dev/shm:/dev/shm  # Shared memory for Puppeteer
    environment:
      - CI=true
      - HEADLESS=true
      - BASE_URL=http://web-app:3000
      - API_URL=http://api:8000
      - BROWSER=chromium
      - VIEWPORT=desktop
      - SLOWMO=0
      - TIMEOUT=60000
      - PARALLEL_JOBS=2
    command: yarn test:e2e:docker
    depends_on:
      web-app:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - test-network
    shm_size: 2gb  # Increase shared memory for Chrome

  # Performance testing with Lighthouse
  lighthouse-runner:
    image: femtopixel/google-lighthouse:latest
    container_name: its-camera-ai-lighthouse
    volumes:
      - ./tests/reports/lighthouse:/home/chrome/reports
    command: |
      lighthouse http://web-app:3000
        --chrome-flags="--no-sandbox --headless --disable-gpu --disable-dev-shm-usage"
        --output=html
        --output=json
        --output-path=/home/chrome/reports/lighthouse-report
        --throttling-method=devtools
        --form-factor=desktop
        --preset=desktop
    depends_on:
      web-app:
        condition: service_healthy
    networks:
      - test-network

  # Load testing with K6
  load-testing:
    image: grafana/k6:latest
    container_name: its-camera-ai-k6
    volumes:
      - ./tests/performance:/scripts
      - ./tests/reports/k6:/reports
    environment:
      - K6_OUT=json=/reports/k6-results.json
      - API_BASE_URL=http://api:8000
      - WEB_BASE_URL=http://web-app:3000
    command: run --vus 10 --duration 30s /scripts/load-test.js
    depends_on:
      web-app:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - test-network

  # Accessibility testing with axe-core
  a11y-testing:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: its-camera-ai-a11y
    volumes:
      - .:/app
      - ./tests/reports/a11y:/app/tests/reports/a11y
    environment:
      - CI=true
      - BASE_URL=http://web-app:3000
    command: yarn test:a11y
    depends_on:
      web-app:
        condition: service_healthy
    networks:
      - test-network

  # Visual regression testing
  visual-testing:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: its-camera-ai-visual
    volumes:
      - .:/app
      - ./tests/screenshots:/app/tests/screenshots
      - ./tests/visual-baseline:/app/tests/visual-baseline
    environment:
      - CI=true
      - BASE_URL=http://web-app:3000
      - PERCY_TOKEN=${PERCY_TOKEN}
    command: yarn test:visual
    depends_on:
      web-app:
        condition: service_healthy
    networks:
      - test-network

networks:
  test-network:
    driver: bridge

volumes:
  postgres_test_data:
  redis_test_data: