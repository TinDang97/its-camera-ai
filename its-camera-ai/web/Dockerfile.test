# Test-specific Dockerfile for ITS Camera AI Web Application
# Optimized for Puppeteer E2E tests, performance testing, and CI/CD

FROM node:20-slim AS base

# Install system dependencies for Puppeteer and testing tools
RUN apt-get update && apt-get install -y \
    # Puppeteer dependencies
    ca-certificates \
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    wget \
    xdg-utils \
    # Additional testing utilities
    curl \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./

# Install dependencies including dev dependencies
RUN yarn install --frozen-lockfile

# Copy application source
COPY . .

# Install Puppeteer with Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable

# Download and install Chrome
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for testing
RUN groupadd -r testuser && useradd -r -g testuser -G audio,video testuser \
    && mkdir -p /home/testuser/Downloads \
    && chown -R testuser:testuser /home/testuser \
    && chown -R testuser:testuser /app

# Set up test directories
RUN mkdir -p /app/tests/{reports,screenshots,videos,coverage,e2e,visual-baseline} \
    && chown -R testuser:testuser /app/tests

# Switch to non-root user
USER testuser

# Set environment variables for testing
ENV CI=true
ENV NODE_ENV=test
ENV HEADLESS=true
ENV DISABLE_GPU=true

# Expose ports for test server
EXPOSE 3000

# Default command for running tests
CMD ["yarn", "test:e2e"]