syntax = "proto3";

package its_camera_ai.streaming;

import "processed_frame.proto";

option py_generic_services = true;

// Streaming service for high-performance frame processing
service StreamingService {
  // Stream processed frames
  rpc StreamFrames(stream ProcessedFrame) returns (stream StreamResponse);
  
  // Batch processing for efficiency
  rpc ProcessFrameBatch(ProcessedFrameBatch) returns (BatchResponse);
  
  // Queue management
  rpc GetQueueMetrics(QueueMetricsRequest) returns (QueueMetrics);
  rpc PurgeQueue(PurgeQueueRequest) returns (PurgeQueueResponse);
  
  // Stream management
  rpc RegisterStream(CameraStreamConfig) returns (StreamRegistrationResponse);
  rpc UpdateStreamConfig(CameraStreamConfig) returns (StreamUpdateResponse);
  rpc GetStreamStatus(StreamStatusRequest) returns (CameraStreamConfig);
  
  // Health and monitoring
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  rpc GetSystemMetrics(SystemMetricsRequest) returns (SystemMetricsResponse);
}

// Response messages
message StreamResponse {
  bool success = 1;
  string message = 2;
  string frame_id = 3;
  double processing_time_ms = 4;
}

message BatchResponse {
  bool success = 1;
  string batch_id = 2;
  int32 processed_count = 3;
  int32 failed_count = 4;
  repeated ProcessingError errors = 5;
  double total_processing_time_ms = 6;
}

// Request messages
message QueueMetricsRequest {
  string queue_name = 1;
}

message PurgeQueueRequest {
  string queue_name = 1;
  bool force = 2;
}

message PurgeQueueResponse {
  bool success = 1;
  int64 purged_count = 2;
  string message = 3;
}

message StreamRegistrationResponse {
  bool success = 1;
  string camera_id = 2;
  string message = 3;
}

message StreamUpdateResponse {
  bool success = 1;
  string camera_id = 2;
  string message = 3;
}

message StreamStatusRequest {
  string camera_id = 1;
}

message HealthCheckRequest {
  string service_name = 1;
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  Status status = 1;
  string message = 2;
  double response_time_ms = 3;
}

message SystemMetricsRequest {
  bool include_queue_metrics = 1;
  bool include_performance_metrics = 2;
}

message SystemMetricsResponse {
  repeated QueueMetrics queue_metrics = 1;
  PerformanceMetrics performance_metrics = 2;
  double timestamp = 3;
}

message PerformanceMetrics {
  int64 frames_processed = 1;
  int64 frames_rejected = 2;
  double avg_processing_time_ms = 3;
  double throughput_fps = 4;
  int64 error_count = 5;
  double memory_usage_mb = 6;
  double cpu_usage_percent = 7;
  int32 active_connections = 8;
}
