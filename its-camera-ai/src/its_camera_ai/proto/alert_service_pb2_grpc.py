# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import alert_service_pb2 as alert__service__pb2
import grpc

GRPC_GENERATED_VERSION = "1.71.2"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in alert_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AlertServiceStub:
    """Alert service for violation and anomaly notifications"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessViolationAlert = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/ProcessViolationAlert",
            request_serializer=alert__service__pb2.ViolationAlertRequest.SerializeToString,
            response_deserializer=alert__service__pb2.AlertResponse.FromString,
            _registered_method=True,
        )
        self.ProcessAnomalyAlert = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/ProcessAnomalyAlert",
            request_serializer=alert__service__pb2.AnomalyAlertRequest.SerializeToString,
            response_deserializer=alert__service__pb2.AlertResponse.FromString,
            _registered_method=True,
        )
        self.SendAlert = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/SendAlert",
            request_serializer=alert__service__pb2.CustomAlertRequest.SerializeToString,
            response_deserializer=alert__service__pb2.AlertResponse.FromString,
            _registered_method=True,
        )
        self.GetAlertStatistics = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/GetAlertStatistics",
            request_serializer=alert__service__pb2.AlertStatisticsRequest.SerializeToString,
            response_deserializer=alert__service__pb2.AlertStatisticsResponse.FromString,
            _registered_method=True,
        )
        self.RetryFailedAlerts = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/RetryFailedAlerts",
            request_serializer=alert__service__pb2.RetryRequest.SerializeToString,
            response_deserializer=alert__service__pb2.RetryResponse.FromString,
            _registered_method=True,
        )
        self.AcknowledgeAlert = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/AcknowledgeAlert",
            request_serializer=alert__service__pb2.AcknowledgeRequest.SerializeToString,
            response_deserializer=alert__service__pb2.AcknowledgeResponse.FromString,
            _registered_method=True,
        )
        self.HealthCheck = channel.unary_unary(
            "/its_camera_ai.alert.AlertService/HealthCheck",
            request_serializer=alert__service__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=alert__service__pb2.HealthCheckResponse.FromString,
            _registered_method=True,
        )


class AlertServiceServicer:
    """Alert service for violation and anomaly notifications"""

    def ProcessViolationAlert(self, request, context):
        """Process violation alert"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ProcessAnomalyAlert(self, request, context):
        """Process anomaly alert"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendAlert(self, request, context):
        """Send custom alert"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAlertStatistics(self, request, context):
        """Get alert statistics"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetryFailedAlerts(self, request, context):
        """Retry failed alerts"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AcknowledgeAlert(self, request, context):
        """Acknowledge alert"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """Health check"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlertServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ProcessViolationAlert": grpc.unary_unary_rpc_method_handler(
            servicer.ProcessViolationAlert,
            request_deserializer=alert__service__pb2.ViolationAlertRequest.FromString,
            response_serializer=alert__service__pb2.AlertResponse.SerializeToString,
        ),
        "ProcessAnomalyAlert": grpc.unary_unary_rpc_method_handler(
            servicer.ProcessAnomalyAlert,
            request_deserializer=alert__service__pb2.AnomalyAlertRequest.FromString,
            response_serializer=alert__service__pb2.AlertResponse.SerializeToString,
        ),
        "SendAlert": grpc.unary_unary_rpc_method_handler(
            servicer.SendAlert,
            request_deserializer=alert__service__pb2.CustomAlertRequest.FromString,
            response_serializer=alert__service__pb2.AlertResponse.SerializeToString,
        ),
        "GetAlertStatistics": grpc.unary_unary_rpc_method_handler(
            servicer.GetAlertStatistics,
            request_deserializer=alert__service__pb2.AlertStatisticsRequest.FromString,
            response_serializer=alert__service__pb2.AlertStatisticsResponse.SerializeToString,
        ),
        "RetryFailedAlerts": grpc.unary_unary_rpc_method_handler(
            servicer.RetryFailedAlerts,
            request_deserializer=alert__service__pb2.RetryRequest.FromString,
            response_serializer=alert__service__pb2.RetryResponse.SerializeToString,
        ),
        "AcknowledgeAlert": grpc.unary_unary_rpc_method_handler(
            servicer.AcknowledgeAlert,
            request_deserializer=alert__service__pb2.AcknowledgeRequest.FromString,
            response_serializer=alert__service__pb2.AcknowledgeResponse.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=alert__service__pb2.HealthCheckRequest.FromString,
            response_serializer=alert__service__pb2.HealthCheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "its_camera_ai.alert.AlertService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "its_camera_ai.alert.AlertService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class AlertService:
    """Alert service for violation and anomaly notifications"""

    @staticmethod
    def ProcessViolationAlert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/ProcessViolationAlert",
            alert__service__pb2.ViolationAlertRequest.SerializeToString,
            alert__service__pb2.AlertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ProcessAnomalyAlert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/ProcessAnomalyAlert",
            alert__service__pb2.AnomalyAlertRequest.SerializeToString,
            alert__service__pb2.AlertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendAlert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/SendAlert",
            alert__service__pb2.CustomAlertRequest.SerializeToString,
            alert__service__pb2.AlertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetAlertStatistics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/GetAlertStatistics",
            alert__service__pb2.AlertStatisticsRequest.SerializeToString,
            alert__service__pb2.AlertStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RetryFailedAlerts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/RetryFailedAlerts",
            alert__service__pb2.RetryRequest.SerializeToString,
            alert__service__pb2.RetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def AcknowledgeAlert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/AcknowledgeAlert",
            alert__service__pb2.AcknowledgeRequest.SerializeToString,
            alert__service__pb2.AcknowledgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.alert.AlertService/HealthCheck",
            alert__service__pb2.HealthCheckRequest.SerializeToString,
            alert__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
