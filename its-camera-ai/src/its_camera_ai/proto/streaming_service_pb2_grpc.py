# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
# ruff: noqa: ARG002
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from . import processed_frame_pb2 as processed__frame__pb2
from . import streaming_service_pb2 as streaming__service__pb2

GRPC_GENERATED_VERSION = "1.71.2"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in streaming_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class StreamingServiceStub:
    """Streaming service for high-performance frame processing"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamFrames = channel.stream_stream(
            "/its_camera_ai.streaming.StreamingService/StreamFrames",
            request_serializer=processed__frame__pb2.ProcessedFrame.SerializeToString,
            response_deserializer=streaming__service__pb2.StreamResponse.FromString,
            _registered_method=True,
        )
        self.ProcessFrameBatch = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/ProcessFrameBatch",
            request_serializer=processed__frame__pb2.ProcessedFrameBatch.SerializeToString,
            response_deserializer=streaming__service__pb2.BatchResponse.FromString,
            _registered_method=True,
        )
        self.GetQueueMetrics = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/GetQueueMetrics",
            request_serializer=streaming__service__pb2.QueueMetricsRequest.SerializeToString,
            response_deserializer=processed__frame__pb2.QueueMetrics.FromString,
            _registered_method=True,
        )
        self.PurgeQueue = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/PurgeQueue",
            request_serializer=streaming__service__pb2.PurgeQueueRequest.SerializeToString,
            response_deserializer=streaming__service__pb2.PurgeQueueResponse.FromString,
            _registered_method=True,
        )
        self.RegisterStream = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/RegisterStream",
            request_serializer=processed__frame__pb2.CameraStreamConfig.SerializeToString,
            response_deserializer=streaming__service__pb2.StreamRegistrationResponse.FromString,
            _registered_method=True,
        )
        self.UpdateStreamConfig = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/UpdateStreamConfig",
            request_serializer=processed__frame__pb2.CameraStreamConfig.SerializeToString,
            response_deserializer=streaming__service__pb2.StreamUpdateResponse.FromString,
            _registered_method=True,
        )
        self.GetStreamStatus = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/GetStreamStatus",
            request_serializer=streaming__service__pb2.StreamStatusRequest.SerializeToString,
            response_deserializer=processed__frame__pb2.CameraStreamConfig.FromString,
            _registered_method=True,
        )
        self.HealthCheck = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/HealthCheck",
            request_serializer=streaming__service__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=streaming__service__pb2.HealthCheckResponse.FromString,
            _registered_method=True,
        )
        self.GetSystemMetrics = channel.unary_unary(
            "/its_camera_ai.streaming.StreamingService/GetSystemMetrics",
            request_serializer=streaming__service__pb2.SystemMetricsRequest.SerializeToString,
            response_deserializer=streaming__service__pb2.SystemMetricsResponse.FromString,
            _registered_method=True,
        )


class StreamingServiceServicer:
    """Streaming service for high-performance frame processing"""

    def StreamFrames(self, request_iterator, context):
        """Stream processed frames"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ProcessFrameBatch(self, request, context):
        """Batch processing for efficiency"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetQueueMetrics(self, request, context):
        """Queue management"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PurgeQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterStream(self, request, context):
        """Stream management"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateStreamConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStreamStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """Health and monitoring"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSystemMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_StreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamFrames": grpc.stream_stream_rpc_method_handler(
            servicer.StreamFrames,
            request_deserializer=processed__frame__pb2.ProcessedFrame.FromString,
            response_serializer=streaming__service__pb2.StreamResponse.SerializeToString,
        ),
        "ProcessFrameBatch": grpc.unary_unary_rpc_method_handler(
            servicer.ProcessFrameBatch,
            request_deserializer=processed__frame__pb2.ProcessedFrameBatch.FromString,
            response_serializer=streaming__service__pb2.BatchResponse.SerializeToString,
        ),
        "GetQueueMetrics": grpc.unary_unary_rpc_method_handler(
            servicer.GetQueueMetrics,
            request_deserializer=streaming__service__pb2.QueueMetricsRequest.FromString,
            response_serializer=processed__frame__pb2.QueueMetrics.SerializeToString,
        ),
        "PurgeQueue": grpc.unary_unary_rpc_method_handler(
            servicer.PurgeQueue,
            request_deserializer=streaming__service__pb2.PurgeQueueRequest.FromString,
            response_serializer=streaming__service__pb2.PurgeQueueResponse.SerializeToString,
        ),
        "RegisterStream": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterStream,
            request_deserializer=processed__frame__pb2.CameraStreamConfig.FromString,
            response_serializer=streaming__service__pb2.StreamRegistrationResponse.SerializeToString,
        ),
        "UpdateStreamConfig": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateStreamConfig,
            request_deserializer=processed__frame__pb2.CameraStreamConfig.FromString,
            response_serializer=streaming__service__pb2.StreamUpdateResponse.SerializeToString,
        ),
        "GetStreamStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetStreamStatus,
            request_deserializer=streaming__service__pb2.StreamStatusRequest.FromString,
            response_serializer=processed__frame__pb2.CameraStreamConfig.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=streaming__service__pb2.HealthCheckRequest.FromString,
            response_serializer=streaming__service__pb2.HealthCheckResponse.SerializeToString,
        ),
        "GetSystemMetrics": grpc.unary_unary_rpc_method_handler(
            servicer.GetSystemMetrics,
            request_deserializer=streaming__service__pb2.SystemMetricsRequest.FromString,
            response_serializer=streaming__service__pb2.SystemMetricsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "its_camera_ai.streaming.StreamingService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "its_camera_ai.streaming.StreamingService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class StreamingService:
    """Streaming service for high-performance frame processing"""

    @staticmethod
    def StreamFrames(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/its_camera_ai.streaming.StreamingService/StreamFrames",
            processed__frame__pb2.ProcessedFrame.SerializeToString,
            streaming__service__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ProcessFrameBatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/ProcessFrameBatch",
            processed__frame__pb2.ProcessedFrameBatch.SerializeToString,
            streaming__service__pb2.BatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetQueueMetrics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/GetQueueMetrics",
            streaming__service__pb2.QueueMetricsRequest.SerializeToString,
            processed__frame__pb2.QueueMetrics.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PurgeQueue(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/PurgeQueue",
            streaming__service__pb2.PurgeQueueRequest.SerializeToString,
            streaming__service__pb2.PurgeQueueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RegisterStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/RegisterStream",
            processed__frame__pb2.CameraStreamConfig.SerializeToString,
            streaming__service__pb2.StreamRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateStreamConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/UpdateStreamConfig",
            processed__frame__pb2.CameraStreamConfig.SerializeToString,
            streaming__service__pb2.StreamUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetStreamStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/GetStreamStatus",
            streaming__service__pb2.StreamStatusRequest.SerializeToString,
            processed__frame__pb2.CameraStreamConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/HealthCheck",
            streaming__service__pb2.HealthCheckRequest.SerializeToString,
            streaming__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetSystemMetrics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.streaming.StreamingService/GetSystemMetrics",
            streaming__service__pb2.SystemMetricsRequest.SerializeToString,
            streaming__service__pb2.SystemMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
