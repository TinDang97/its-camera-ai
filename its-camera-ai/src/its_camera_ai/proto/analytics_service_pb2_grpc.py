# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import analytics_service_pb2 as analytics__service__pb2
import grpc

GRPC_GENERATED_VERSION = "1.71.2"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in analytics_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AnalyticsServiceStub:
    """Analytics service for traffic data processing and insights"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessDetections = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/ProcessDetections",
            request_serializer=analytics__service__pb2.DetectionRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.AnalyticsResponse.FromString,
            _registered_method=True,
        )
        self.GetTrafficMetrics = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/GetTrafficMetrics",
            request_serializer=analytics__service__pb2.TrafficMetricsRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.TrafficMetricsResponse.FromString,
            _registered_method=True,
        )
        self.GetActiveViolations = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/GetActiveViolations",
            request_serializer=analytics__service__pb2.ViolationsRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.ViolationsResponse.FromString,
            _registered_method=True,
        )
        self.GetTrafficAnomalies = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/GetTrafficAnomalies",
            request_serializer=analytics__service__pb2.AnomaliesRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.AnomaliesResponse.FromString,
            _registered_method=True,
        )
        self.GenerateReport = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/GenerateReport",
            request_serializer=analytics__service__pb2.ReportRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.ReportResponse.FromString,
            _registered_method=True,
        )
        self.HealthCheck = channel.unary_unary(
            "/its_camera_ai.analytics.AnalyticsService/HealthCheck",
            request_serializer=analytics__service__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=analytics__service__pb2.HealthCheckResponse.FromString,
            _registered_method=True,
        )


class AnalyticsServiceServicer:
    """Analytics service for traffic data processing and insights"""

    def ProcessDetections(self, request, context):
        """Process detections and generate analytics"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTrafficMetrics(self, request, context):
        """Get traffic metrics for time range"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetActiveViolations(self, request, context):
        """Get active violations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTrafficAnomalies(self, request, context):
        """Get traffic anomalies"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GenerateReport(self, request, context):
        """Generate analytics report"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """Health check"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AnalyticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ProcessDetections": grpc.unary_unary_rpc_method_handler(
            servicer.ProcessDetections,
            request_deserializer=analytics__service__pb2.DetectionRequest.FromString,
            response_serializer=analytics__service__pb2.AnalyticsResponse.SerializeToString,
        ),
        "GetTrafficMetrics": grpc.unary_unary_rpc_method_handler(
            servicer.GetTrafficMetrics,
            request_deserializer=analytics__service__pb2.TrafficMetricsRequest.FromString,
            response_serializer=analytics__service__pb2.TrafficMetricsResponse.SerializeToString,
        ),
        "GetActiveViolations": grpc.unary_unary_rpc_method_handler(
            servicer.GetActiveViolations,
            request_deserializer=analytics__service__pb2.ViolationsRequest.FromString,
            response_serializer=analytics__service__pb2.ViolationsResponse.SerializeToString,
        ),
        "GetTrafficAnomalies": grpc.unary_unary_rpc_method_handler(
            servicer.GetTrafficAnomalies,
            request_deserializer=analytics__service__pb2.AnomaliesRequest.FromString,
            response_serializer=analytics__service__pb2.AnomaliesResponse.SerializeToString,
        ),
        "GenerateReport": grpc.unary_unary_rpc_method_handler(
            servicer.GenerateReport,
            request_deserializer=analytics__service__pb2.ReportRequest.FromString,
            response_serializer=analytics__service__pb2.ReportResponse.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=analytics__service__pb2.HealthCheckRequest.FromString,
            response_serializer=analytics__service__pb2.HealthCheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "its_camera_ai.analytics.AnalyticsService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "its_camera_ai.analytics.AnalyticsService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class AnalyticsService:
    """Analytics service for traffic data processing and insights"""

    @staticmethod
    def ProcessDetections(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/ProcessDetections",
            analytics__service__pb2.DetectionRequest.SerializeToString,
            analytics__service__pb2.AnalyticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTrafficMetrics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/GetTrafficMetrics",
            analytics__service__pb2.TrafficMetricsRequest.SerializeToString,
            analytics__service__pb2.TrafficMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetActiveViolations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/GetActiveViolations",
            analytics__service__pb2.ViolationsRequest.SerializeToString,
            analytics__service__pb2.ViolationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTrafficAnomalies(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/GetTrafficAnomalies",
            analytics__service__pb2.AnomaliesRequest.SerializeToString,
            analytics__service__pb2.AnomaliesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GenerateReport(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/GenerateReport",
            analytics__service__pb2.ReportRequest.SerializeToString,
            analytics__service__pb2.ReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/its_camera_ai.analytics.AnalyticsService/HealthCheck",
            analytics__service__pb2.HealthCheckRequest.SerializeToString,
            analytics__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
