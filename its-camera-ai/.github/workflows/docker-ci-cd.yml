# GitHub Actions CI/CD Pipeline for ITS Camera AI
# Comprehensive Docker-based pipeline with quality gates, testing, and deployment
name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests for emergency deployment'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  WORKER_IMAGE_NAME: ${{ github.repository }}-worker
  BUILD_DATE: ${{ github.run_id }}
  VCS_REF: ${{ github.sha }}

jobs:
  # =============================================================================
  # Code Quality & Security Analysis
  # =============================================================================
  quality-gates:
    name: Quality Gates & Security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'web/yarn.lock'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.4.0"

      - name: Install backend dependencies
        run: |
          uv sync --group dev --group test

      - name: Install frontend dependencies
        working-directory: ./web
        run: yarn install --frozen-lockfile

      # Backend Quality Gates
      - name: Backend - Type checking (MyPy)
        run: uv run mypy src/

      - name: Backend - Code formatting (Black)
        run: uv run black --check src/ tests/

      - name: Backend - Import sorting (isort)
        run: uv run isort --check-only src/ tests/

      - name: Backend - Linting (Ruff)
        run: uv run ruff check src/ tests/

      - name: Backend - Security scanning (Bandit)
        run: uv run bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Backend - Dependency vulnerability check (Safety)
        run: uv run safety check --json --output safety-report.json
        continue-on-error: true

      # Frontend Quality Gates
      - name: Frontend - Type checking (TypeScript)
        working-directory: ./web
        run: yarn type-check

      - name: Frontend - Linting (ESLint)
        working-directory: ./web
        run: yarn lint

      - name: Frontend - Build test
        working-directory: ./web
        run: yarn build

      # Security Analysis
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Upload reports as artifacts
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            trivy-results.sarif

  # =============================================================================
  # Backend Testing
  # =============================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: timescale/timescaledb:latest-pg17
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync --group dev --group test --group ml

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: uv run alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
        run: |
          uv run pytest tests/unit/ \
            --cov=src/its_camera_ai \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=90 \
            --junitxml=pytest-unit.xml \
            -v

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          uv run pytest tests/integration/ \
            --junitxml=pytest-integration.xml \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            pytest-*.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # =============================================================================
  # Frontend Testing
  # =============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'web/yarn.lock'

      - name: Install dependencies
        working-directory: ./web
        run: yarn install --frozen-lockfile

      - name: Run unit tests
        working-directory: ./web
        run: yarn test:unit --coverage --watchAll=false

      - name: Run component tests
        working-directory: ./web
        run: yarn test:components --coverage --watchAll=false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            web/coverage/
            web/test-results/

  # =============================================================================
  # E2E Testing with Docker
  # =============================================================================
  e2e-tests:
    name: E2E Tests (Docker)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Wait for services to be healthy
        run: |
          timeout 300 bash -c 'until docker-compose ps | grep healthy; do sleep 10; done'

      - name: Run E2E tests
        working-directory: ./web
        run: |
          yarn test:e2e:docker
        env:
          E2E_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            web/tests/e2e/screenshots/
            web/tests/e2e/videos/
            web/tests/reports/

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # =============================================================================
  # Build Docker Images
  # =============================================================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.event_name != 'pull_request'

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend image metadata and build
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VCS_REF=${{ env.VCS_REF }}
            VERSION=${{ fromJSON(steps.meta-backend.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Frontend image metadata and build
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VCS_REF=${{ env.VCS_REF }}
            VERSION=${{ fromJSON(steps.meta-frontend.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Worker image build
      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: worker
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.WORKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Security Scanning of Images
  # =============================================================================
  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        image: [backend, frontend]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs[format('{0}-image', matrix.image)] }}
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.image }}.sarif'

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Deploy to staging
        env:
          BACKEND_IMAGE: ${{ needs.build-images.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build-images.outputs.frontend-image }}
          ENVIRONMENT: staging
        run: |
          # Update docker-compose with new images
          export BACKEND_IMAGE_TAG=$(echo "$BACKEND_IMAGE" | cut -d':' -f2)
          export FRONTEND_IMAGE_TAG=$(echo "$FRONTEND_IMAGE" | cut -d':' -f2)

          # Deploy using docker-compose
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d

          # Health check
          sleep 30
          curl -f http://localhost/health || exit 1

      - name: Run smoke tests
        run: |
          # Basic health checks
          curl -f http://localhost/health
          curl -f http://localhost/nginx-health

          # API smoke test
          curl -f http://localhost/api/v1/health

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          BACKEND_IMAGE: ${{ needs.build-images.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build-images.outputs.frontend-image }}
          ENVIRONMENT: production
        run: |
          echo "🚀 Deploying to production..."
          echo "Backend image: $BACKEND_IMAGE"
          echo "Frontend image: $FRONTEND_IMAGE"

          # Production deployment would happen here
          # This could be:
          # - Kubernetes deployment
          # - Docker Swarm deployment
          # - Cloud provider deployment
          # - Or triggering deployment in another system

      - name: Post-deployment verification
        run: |
          echo "✅ Production deployment completed successfully"

          # Add production health checks here
          # - API health checks
          # - Database connectivity
          # - External service connectivity
          # - Performance benchmarks

  # =============================================================================
  # Cleanup
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Clean up old images
        run: |
          # This would clean up old container images
          # to prevent registry bloat
          echo "🧹 Cleanup completed"
